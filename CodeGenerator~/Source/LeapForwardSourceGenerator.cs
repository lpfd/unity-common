using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Linq;
using System.Text;

namespace Leap.Forward.Unity.Common
{
    enum ClassType
    {
        Module,
        Container
    }
    [Generator]
    public class LeapForwardSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var compilation = context.Compilation;
            foreach (var syntaxTree in compilation.SyntaxTrees)
            {
                // Get the root of the syntax tree
                var root = syntaxTree.GetRoot();

                // Find all class declarations
                var classDeclarations = root.DescendantNodes().OfType<ClassDeclarationSyntax>();

                foreach (var classDeclaration in classDeclarations)
                {
                    var classSymbol = compilation.GetSemanticModel(classDeclaration.SyntaxTree).GetDeclaredSymbol(classDeclaration) as ITypeSymbol;

                    if (classSymbol == null)
                        continue;

                    // Check if the class inherits from ModelBase<T>
                    var baseType = classSymbol.BaseType;
                    if (baseType == null || !baseType.IsGenericType)
                        continue;

                    var baseTypeNamespace = baseType.ContainingNamespace.ToDisplayString();
                    if (baseTypeNamespace != "Leap.Forward.Composition")
                        continue;


                    ClassType generationType;
                    switch (baseType.Name)
                    {
                        case "ModuleBase":
                            generationType = ClassType.Module;
                            break;
                        case "ContainerBase":
                            generationType = ClassType.Container;
                            break;
                        default:
                            continue;
                    }

                    var genericArgument = baseType.TypeArguments.FirstOrDefault();
                    if (genericArgument == null)
                        continue;

                    if (generationType == ClassType.Container)
                    {
                        // Compare the generic type argument with the class type
                        if (!SymbolEqualityComparer.Default.Equals(genericArgument, classSymbol))
                        {
                            // Report a diagnostic error
                            var diagnostic = Diagnostic.Create(new DiagnosticDescriptor(
                                id: "MB001",
                                title: "Generic type argument mismatch",
                                messageFormat: "The generic type argument '{0}' does not match the class type '{1}'.",
                                category: "LeapForwardSourceGenerator",
                                DiagnosticSeverity.Error,
                                isEnabledByDefault: true),
                                classDeclaration.Identifier.GetLocation(),
                                genericArgument.Name,
                                classSymbol.Name);

                            context.ReportDiagnostic(diagnostic);
                            continue;
                        }
                    }

                    {
                        // Generate a partial class implementation
                        var stringBuilder = new StringBuilder();
                        stringBuilder.AppendLine("// <auto-generated/>");
                        if (!classSymbol.ContainingNamespace.IsGlobalNamespace)
                        {
                            var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
                            stringBuilder.AppendLine($"namespace {namespaceName}");
                            stringBuilder.AppendLine("{");
                        }
                        stringBuilder.AppendLine($"public partial class {classSymbol.Name}");
                        stringBuilder.AppendLine("{");

                        switch (generationType)
                        {
                            case ClassType.Container:
                                GenerateContainer(stringBuilder, classSymbol);
                                break;
                        }

                        stringBuilder.AppendLine("}");
                        if (!classSymbol.ContainingNamespace.IsGlobalNamespace)
                        {
                            var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
                            stringBuilder.AppendLine("}");
                        }
                        context.AddSource($"{classSymbol.Name}.g.cs", SourceText.From(stringBuilder.ToString(), Encoding.UTF8));
                    }
                }
            }
        }

        private void GenerateContainer(StringBuilder stringBuilder, ITypeSymbol classSymbol)
        {
            var fields = classSymbol.GetMembers().OfType<IFieldSymbol>()
                .Where(field => field.GetAttributes().Any(ad => ad.AttributeClass?.Name == "AttachedModuleAttribute"))
                .Select(field => new FieldInfo(field)).ToList();

            foreach (var field in fields)
            {
                var propertyName = field.PropertyName;
                stringBuilder.AppendLine($"public {field.FieldType} {propertyName}");
                stringBuilder.AppendLine("{");
                stringBuilder.AppendLine($"get {{ return {field.Name}; }}");
                if (field.CollectionElementType == null)
                {
                    stringBuilder.AppendLine($"set {{ if (value != {field.Name})");
                    stringBuilder.AppendLine("{");
                    stringBuilder.AppendLine($"On{propertyName}Changing(value);");
                    stringBuilder.AppendLine($"OnPropertyChanging(nameof({propertyName}));");
                    stringBuilder.AppendLine($"if ({field.Name} != null && value != null) UnityEngine.Debug.LogError(\"{propertyName} of {field.FieldType} module already has value.\");");
                    stringBuilder.AppendLine($"{field.Name} = value;");
                    stringBuilder.AppendLine($"On{propertyName}Changed(value);");
                    stringBuilder.AppendLine($"OnPropertyChanged(nameof({propertyName}));");
                    stringBuilder.AppendLine("}");
                    stringBuilder.AppendLine("}");
                }
                else
                {
                    
                }
                stringBuilder.AppendLine("}");

                stringBuilder.AppendLine($"partial void On{propertyName}Changing({field.FieldType} value);");
                stringBuilder.AppendLine($"partial void On{propertyName}Changed({field.FieldType} value);");

            }

            stringBuilder.AppendLine($"protected override void AttachModule(Leap.Forward.Composition.IModule<{classSymbol.Name}> module)");
            stringBuilder.AppendLine("{");
            foreach (var field in fields)
            {
                stringBuilder.AppendLine($"if (module is {field.CollectionElementType ?? field.FieldType} {field.Name}Value)");
                stringBuilder.AppendLine("{");
                if (field.CollectionElementType == null)
                {
                    stringBuilder.AppendLine($"this.{field.PropertyName} = {field.Name}Value;");
                }
                else
                {
                    stringBuilder.AppendLine($"this.{field.PropertyName}.Add({field.Name}Value);");
                }
                stringBuilder.AppendLine("}");

            }
            stringBuilder.AppendLine("}");

            stringBuilder.AppendLine($"protected override void DetachModule(Leap.Forward.Composition.IModule<{classSymbol.Name}> module)");
            stringBuilder.AppendLine("{");
            foreach (var field in fields)
            {
                if (field.CollectionElementType == null)
                {
                    stringBuilder.AppendLine($"if (module is {field.FieldType} {field.Name}Value && this.{field.PropertyName} == {field.Name}Value)");
                }
                else
                {
                    stringBuilder.AppendLine($"if (module is {field.CollectionElementType} {field.Name}Value)");
                }
                stringBuilder.AppendLine("{");
                if (field.CollectionElementType == null)
                {
                    stringBuilder.AppendLine($"this.{field.PropertyName} = null;");
                }
                else
                {
                    stringBuilder.AppendLine($"this.{field.PropertyName}.Remove({field.Name}Value);");
                }
                stringBuilder.AppendLine("}");

            }
            stringBuilder.AppendLine("}");
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }
    }
}